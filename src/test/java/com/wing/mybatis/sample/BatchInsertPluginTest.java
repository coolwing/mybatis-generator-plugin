package com.wing.mybatis.sample;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.wing.mybatis.product.domain.User;
import com.wing.mybatis.product.example.UserExample;
import com.wing.mybatis.product.example.UserExample.Column;
import com.wing.mybatis.sample.common.Status;
import org.junit.Assert;
import org.junit.Test;

public class BatchInsertPluginTest extends BasePluginTest {

    @Test
    public void testWithAutoGeneratedId() throws Exception {
        resetDB();
        Date date = new Date();
        List<User> users = new ArrayList<User>() {{
            add(new User(null, "user1", 200, "江苏省扬州市", Status.AVAILABLE, date, date, "user1blob".getBytes(StandardCharsets.UTF_8)));
            add(new User(null, "user2", 200, "江苏省南通市", Status.DISABLE, date, date, "user2blob".getBytes(StandardCharsets.UTF_8)));
        }};

        int num = userMapper.batchInsert(users);
        Assert.assertEquals(num, 2);
        Assert.assertEquals(users.get(0).getId().longValue(), 11L);
        Assert.assertEquals(users.get(1).getId().longValue(), 12L);

        List<User> result = userMapper.selectByExampleWithBLOBs(UserExample.newAndCreateCriteria().andAgeEqualTo(200).example());
        Assert.assertEquals(result.size(), 2);
        Assert.assertEquals(result.get(0).getId().longValue(), 11L);
        User user = result.get(1);
        Assert.assertEquals(user.getId().longValue(), 12L);
        Assert.assertEquals(user.getName(), "user2");
        Assert.assertEquals(user.getAge().intValue(), 200);
        Assert.assertEquals(user.getLocation(), "江苏省南通市");
        Assert.assertEquals(user.getStatus(), Status.DISABLE);
        Assert.assertEquals(new String(user.getFeature()), "user2blob");
    }

    @Test
    public void testWithAutoGeneratedId2() throws Exception {
        resetDB();
        Date date = new Date();
        List<User> users = new ArrayList<User>() {{
            add(new User(101L, "user1", 200, "江苏省扬州市", Status.AVAILABLE, date, date, "user1blob".getBytes(StandardCharsets.UTF_8)));
            add(new User(102L, "user2", 200, "江苏省南通市", Status.DISABLE, date, date, "user2blob".getBytes(StandardCharsets.UTF_8)));
        }};

        int num = userMapper.batchInsert(users);
        Assert.assertEquals(num, 2);
        Assert.assertEquals(users.get(0).getId().longValue(), 11L);
        Assert.assertEquals(users.get(1).getId().longValue(), 12L);

        List<User> result = userMapper.selectByExample(UserExample.newAndCreateCriteria().andAgeEqualTo(200).example());
        Assert.assertEquals(result.size(), 2);
        Assert.assertEquals(result.get(0).getId().longValue(), 11L);
        Assert.assertEquals(result.get(1).getId().longValue(), 12L);
    }

    @Test
    public void testWithAutoGeneratedIdByColumn() throws Exception {
        resetDB();
        Date date = new Date();
        List<User> users = new ArrayList<User>() {{
            add(new User(null, "user1", 200, "江苏省扬州市", Status.AVAILABLE, date, date, "user1blob".getBytes(StandardCharsets.UTF_8)));
            add(new User(null, "user2", 200, "江苏省南通市", Status.DISABLE, date, date, "user2blob".getBytes(StandardCharsets.UTF_8)));
        }};

        int num = userMapper.batchInsertWithColumn(users, Column.ID, Column.NAME, Column.AGE, Column.STATUS);
        Assert.assertEquals(num, 2);
        Assert.assertEquals(users.get(0).getId().longValue(), 11L);
        Assert.assertEquals(users.get(1).getId().longValue(), 12L);

        List<User> result = userMapper.selectByExampleWithBLOBs(UserExample.newAndCreateCriteria().andAgeEqualTo(200).example());
        Assert.assertEquals(result.size(), 2);
        Assert.assertEquals(result.get(0).getId().longValue(), 11L);
        Assert.assertEquals(result.get(1).getId().longValue(), 12L);
        Assert.assertEquals(result.get(1).getName(), "user2");
        Assert.assertEquals(result.get(1).getAge().intValue(), 200);
        Assert.assertNull(result.get(1).getLocation());
        Assert.assertEquals(result.get(1).getStatus(), Status.DISABLE);
        Assert.assertNull(result.get(1).getFeature());
    }

    @Test
    public void testWithCertainIdByColumn() throws Exception {
        resetDB();
        Date date = new Date();
        List<User> users = new ArrayList<User>() {{
            add(new User(101L, "user1", 200, "江苏省扬州市", Status.AVAILABLE, date, date, "user1blob".getBytes(StandardCharsets.UTF_8)));
            add(new User(102L, "user2", 200, "江苏省南通市", Status.DISABLE, date, date, "user2blob".getBytes(StandardCharsets.UTF_8)));
        }};

        int num = userMapper.batchInsertWithColumn(users, Column.ID, Column.NAME, Column.AGE, Column.STATUS);
        Assert.assertEquals(num, 2);
        //批量插入时，回写的id
        //Assert.assertEquals(users.get(0).getId().longValue(), 102L);
        //Assert.assertEquals(users.get(1).getId().longValue(), 103L);

        List<User> result = userMapper.selectByExampleWithBLOBs(UserExample.newAndCreateCriteria().andAgeEqualTo(200).example());
        Assert.assertEquals(result.size(), 2);
        Assert.assertEquals(result.get(0).getId().longValue(), 101L);
        Assert.assertEquals(result.get(1).getId().longValue(), 102L);
        Assert.assertEquals(result.get(1).getName(), "user2");
        Assert.assertEquals(result.get(1).getAge().intValue(), 200);
        Assert.assertNull(result.get(1).getLocation());
        Assert.assertEquals(result.get(1).getStatus(), Status.DISABLE);
        Assert.assertNull(result.get(1).getFeature());
    }

    @Test
    public void testWithEmptyColumn() {
        try {
            resetDB();
            Date date = new Date();
            List<User> users = new ArrayList<User>() {{
                add(new User(101L, "user1", 200, "江苏省扬州市", Status.AVAILABLE, date, date, "user1blob".getBytes(StandardCharsets.UTF_8)));
                add(new User(102L, "user2", 200, "江苏省南通市", Status.DISABLE, date, date, "user2blob".getBytes(StandardCharsets.UTF_8)));
            }};
            int num = userMapper.batchInsertWithColumn(users);
            Assert.assertEquals(num, 2);
        } catch (Exception e) {
            Assert.assertNotNull(e);
            Assert.assertEquals("Field 'name' doesn't have a default value", e.getCause().getLocalizedMessage());
        }
    }
}
