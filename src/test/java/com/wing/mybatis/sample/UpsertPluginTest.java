package com.wing.mybatis.sample;

import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.List;

import com.wing.mybatis.product.domain.User;
import com.wing.mybatis.product.example.UserExample;
import com.wing.mybatis.sample.common.Status;
import org.junit.Assert;
import org.junit.Test;

public class UpsertPluginTest extends BasePluginTest {
    @Test
    public void testInsertWithCertainId() throws Exception {
        resetDB();
        Date date = new Date();
        User user = new User(100L, "X", 100, "江苏省扬州市", Status.AVAILABLE, date, date, "blob".getBytes(StandardCharsets.UTF_8));
        int num = userMapper.upsert(user);
        Assert.assertEquals(1, num);

        List<User> users = userMapper.selectByExample(UserExample.newAndCreateCriteria().andIdEqualTo(100L).example());
        Assert.assertEquals(1, users.size());
        User insertedUser = users.get(0);
        Assert.assertEquals(insertedUser.getName(), "X");
        Assert.assertEquals(insertedUser.getAge().intValue(), 100);
        Assert.assertEquals(insertedUser.getLocation(), "江苏省扬州市");
        Assert.assertEquals(insertedUser.getStatus(), Status.AVAILABLE);
        Assert.assertNull(insertedUser.getFeature());
    }

    @Test
    public void testInsertWithAutoGeneratedId() throws Exception {
        resetDB();
        Date date = new Date();
        User user = new User(null, "X", 100, "江苏省扬州市", Status.AVAILABLE, date, date, "blob".getBytes(StandardCharsets.UTF_8));
        int num = userMapper.upsert(user);
        Assert.assertEquals(1, num);
        Assert.assertEquals(11L, user.getId().longValue());

        List<User> users = userMapper.selectByExample(UserExample.newAndCreateCriteria().andIdEqualTo(11L).example());
        Assert.assertEquals(1, users.size());
        User insertedUser = users.get(0);
        Assert.assertEquals(insertedUser.getName(), "X");
        Assert.assertEquals(insertedUser.getAge().intValue(), 100);
        Assert.assertEquals(insertedUser.getLocation(), "江苏省扬州市");
        Assert.assertEquals(insertedUser.getStatus(), Status.AVAILABLE);
        Assert.assertNull(insertedUser.getFeature());
    }

    @Test
    public void testUpdate() throws Exception {
        resetDB();
        Date date = new Date();
        User user = new User(10L, "X", 100, "江苏省扬州市", Status.AVAILABLE, date, date, "blob".getBytes(StandardCharsets.UTF_8));
        int num = userMapper.upsert(user);
        Assert.assertEquals(2, num);

        List<User> users = userMapper.selectByExampleWithBLOBs(UserExample.newAndCreateCriteria().andIdEqualTo(10L).example());
        Assert.assertEquals(1, users.size());
        User insertedUser = users.get(0);
        Assert.assertEquals(insertedUser.getName(), "X");
        Assert.assertEquals(insertedUser.getAge().intValue(), 100);
        Assert.assertEquals(insertedUser.getLocation(), "江苏省扬州市");
        Assert.assertEquals(insertedUser.getStatus(), Status.AVAILABLE);
        Assert.assertNull(insertedUser.getFeature());
    }

    @Test
    public void testInsertWithCertainIdWithBLOBs() throws Exception {
        resetDB();
        Date date = new Date();
        User user = new User(100L, "X", 100, "江苏省扬州市", Status.AVAILABLE, date, date, "blob".getBytes(StandardCharsets.UTF_8));
        int num = userMapper.upsertWithBLOBs(user);
        Assert.assertEquals(1, num);

        List<User> users = userMapper.selectByExampleWithBLOBs(UserExample.newAndCreateCriteria().andIdEqualTo(100L).example());
        Assert.assertEquals(1, users.size());
        User insertedUser = users.get(0);
        Assert.assertEquals(insertedUser.getName(), "X");
        Assert.assertEquals(insertedUser.getAge().intValue(), 100);
        Assert.assertEquals(insertedUser.getLocation(), "江苏省扬州市");
        Assert.assertEquals(insertedUser.getStatus(), Status.AVAILABLE);
        Assert.assertEquals("blob", new String(insertedUser.getFeature()));
    }

    @Test
    public void testInsertWithAutoGeneratedIdWithBLOBs() throws Exception {
        resetDB();
        Date date = new Date();
        User user = new User(null, "X", 100, "江苏省扬州市", Status.AVAILABLE, date, date, "blob".getBytes(StandardCharsets.UTF_8));
        int num = userMapper.upsertWithBLOBs(user);
        Assert.assertEquals(1, num);
        Assert.assertEquals(11L, user.getId().longValue());

        List<User> users = userMapper.selectByExampleWithBLOBs(UserExample.newAndCreateCriteria().andIdEqualTo(11L).example());
        Assert.assertEquals(1, users.size());
        User insertedUser = users.get(0);
        Assert.assertEquals(insertedUser.getName(), "X");
        Assert.assertEquals(insertedUser.getAge().intValue(), 100);
        Assert.assertEquals(insertedUser.getLocation(), "江苏省扬州市");
        Assert.assertEquals(insertedUser.getStatus(), Status.AVAILABLE);
        Assert.assertEquals("blob", new String(insertedUser.getFeature()));
    }

    @Test
    public void testUpdateWithBLOBs() throws Exception {
        resetDB();
        Date date = new Date();
        User user = new User(10L, "X", 100, "江苏省扬州市", Status.AVAILABLE, date, date, "blob".getBytes(StandardCharsets.UTF_8));
        int num = userMapper.upsertWithBLOBs(user);
        Assert.assertEquals(2, num);

        List<User> users = userMapper.selectByExampleWithBLOBs(UserExample.newAndCreateCriteria().andIdEqualTo(10L).example());
        Assert.assertEquals(1, users.size());
        User insertedUser = users.get(0);
        Assert.assertEquals(insertedUser.getName(), "X");
        Assert.assertEquals(insertedUser.getAge().intValue(), 100);
        Assert.assertEquals(insertedUser.getLocation(), "江苏省扬州市");
        Assert.assertEquals(insertedUser.getStatus(), Status.AVAILABLE);
        Assert.assertEquals("blob", new String(insertedUser.getFeature()));
    }

    @Test
    public void testInsertWithCertainIdSelective() throws Exception {
        resetDB();
        Date date = new Date();
        User user = new User(100L, "X", 100, null, Status.AVAILABLE, date, date, "blob".getBytes(StandardCharsets.UTF_8));
        int num = userMapper.upsertSelective(user);
        Assert.assertEquals(1, num);

        List<User> users = userMapper.selectByExampleWithBLOBs(UserExample.newAndCreateCriteria().andIdEqualTo(100L).example());
        Assert.assertEquals(1, users.size());
        User insertedUser = users.get(0);
        Assert.assertEquals(insertedUser.getName(), "X");
        Assert.assertEquals(insertedUser.getAge().intValue(), 100);
        Assert.assertNull(insertedUser.getLocation());
        Assert.assertEquals(insertedUser.getStatus(), Status.AVAILABLE);
        Assert.assertEquals("blob", new String(insertedUser.getFeature()));
    }

    @Test
    public void testInsertWithAutoGeneratedIdSelective() throws Exception {
        resetDB();
        Date date = new Date();
        User user = new User(null, "X", 100, null, Status.AVAILABLE, date, date, "blob".getBytes(StandardCharsets.UTF_8));
        int num = userMapper.upsertSelective(user);
        Assert.assertEquals(1, num);
        Assert.assertEquals(11L, user.getId().longValue());

        List<User> users = userMapper.selectByExampleWithBLOBs(UserExample.newAndCreateCriteria().andIdEqualTo(11L).example());
        Assert.assertEquals(1, users.size());
        User insertedUser = users.get(0);
        Assert.assertEquals(insertedUser.getName(), "X");
        Assert.assertEquals(insertedUser.getAge().intValue(), 100);
        Assert.assertNull(insertedUser.getLocation());
        Assert.assertEquals(insertedUser.getStatus(), Status.AVAILABLE);
        Assert.assertEquals("blob", new String(insertedUser.getFeature()));
    }

    @Test
    public void testUpdateSelective() throws Exception {
        resetDB();
        Date date = new Date();
        User user = new User(10L, "X", 100, null, Status.AVAILABLE, date, date, "blob".getBytes(StandardCharsets.UTF_8));
        int num = userMapper.upsertSelective(user);
        Assert.assertEquals(2, num);

        List<User> users = userMapper.selectByExampleWithBLOBs(UserExample.newAndCreateCriteria().andIdEqualTo(10L).example());
        Assert.assertEquals(1, users.size());
        User insertedUser = users.get(0);
        Assert.assertEquals(insertedUser.getName(), "X");
        Assert.assertEquals(insertedUser.getAge().intValue(), 100);
        Assert.assertEquals(insertedUser.getLocation(), "江苏省南京市");
        Assert.assertEquals(insertedUser.getStatus(), Status.AVAILABLE);
        Assert.assertEquals("blob", new String(insertedUser.getFeature()));
    }
}
